
import { serve } from "https://deno.land/std@0.190.0/http/server.ts";
import Stripe from 'https://esm.sh/stripe@14.21.0';
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.45.0';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    // Create Supabase client for user authentication
    const supabaseClient = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_ANON_KEY') ?? '',
    );

    // Get the user from the authorization header
    const authHeader = req.headers.get('Authorization')!;
    const token = authHeader.replace('Bearer ', '');
    const { data: { user } } = await supabaseClient.auth.getUser(token);

    if (!user) {
      throw new Error('Not authenticated');
    }

    const email = user.email;
    if (!email) {
      throw new Error('User email not found');
    }

    const stripe = new Stripe(Deno.env.get('STRIPE_SECRET_KEY') || '', {
      apiVersion: '2023-10-16',
    });

    // Check if customer exists
    const customers = await stripe.customers.list({
      email: email,
      limit: 1
    });

    if (customers.data.length === 0) {
      return new Response(
        JSON.stringify({ 
          status: 'no_subscription',
          hasActiveSubscription: false,
          remainingOneTimeCredits: 0
        }),
        {
          headers: { ...corsHeaders, 'Content-Type': 'application/json' },
          status: 200,
        }
      );
    }

    const customerId = customers.data[0].id;
    
    // Check for active subscriptions (both monthly and yearly)
    const subscriptions = await stripe.subscriptions.list({
      customer: customerId,
      status: 'active',
      limit: 100
    });

    const hasActiveSubscription = subscriptions.data.length > 0;
    
    // Get all subscriptions (including past ones) to determine periods of subscription
    const allSubscriptions = await stripe.subscriptions.list({
      customer: customerId,
      status: ['active', 'canceled', 'past_due', 'unpaid'],
      limit: 100
    });
    
    // Build a timeline of subscription periods
    const subscriptionPeriods = [];
    for (const sub of allSubscriptions.data) {
      // Get all invoices for this subscription to track all periods
      const invoices = await stripe.invoices.list({
        subscription: sub.id
      });
      
      for (const invoice of invoices.data) {
        if (invoice.status === 'paid') {
          subscriptionPeriods.push({
            start: new Date(invoice.period_start * 1000),
            end: new Date(invoice.period_end * 1000)
          });
        }
      }
      
      // Also add the current period if active
      if (sub.status === 'active') {
        subscriptionPeriods.push({
          start: new Date(sub.current_period_start * 1000),
          end: new Date(sub.current_period_end * 1000)
        });
      }
    }
    
    // Get one-time payment information - only count successful charges
    const charges = await stripe.charges.list({
      customer: customerId,
      limit: 100
    });
    
    // For simplicity, each successful one-time payment gives 30 credits
    // Only count charges that were successful (paid status)
    const successfulOneTimePayments = charges.data.filter(
      charge => charge.status === 'succeeded' && 
                charge.amount_captured > 0 && 
                !charge.disputed && 
                !charge.refunded
    ).length;
    
    const totalOneTimeCredits = successfulOneTimePayments * 30;
    
    // Get all user stories generated by this user
    const { data: userStories, error } = await supabaseClient
      .from('user_stories')
      .select('*')
      .eq('user_id', user.id);
    
    if (error) {
      console.error('Error fetching user stories:', error);
      throw error;
    }
    
    // Filter out stories created during subscription periods
    const storiesOutsideSubscription = userStories?.filter(story => {
      const storyDate = new Date(story.created_at);
      // Check if this story was created during any subscription period
      return !subscriptionPeriods.some(period => 
        storyDate >= period.start && storyDate <= period.end
      );
    }) || [];
    
    // Calculate total usage outside subscription periods
    const totalUsageOutsideSubscription = storiesOutsideSubscription.length;
    
    // Calculate used one-time credits
    // If they've used more than the free tier (5), the excess counts against one-time credits
    const usedOneTimeCredits = Math.max(0, totalUsageOutsideSubscription - 5);
    
    const remainingOneTimeCredits = Math.max(0, totalOneTimeCredits - usedOneTimeCredits);

    console.log(`User: ${email}, Active subscription: ${hasActiveSubscription}, One-time credits: ${remainingOneTimeCredits}, Total usage outside subscriptions: ${totalUsageOutsideSubscription}, Used one-time: ${usedOneTimeCredits}, Total one-time purchased: ${totalOneTimeCredits}, Subscription periods: ${subscriptionPeriods.length}`);

    return new Response(
      JSON.stringify({ 
        status: hasActiveSubscription ? 'subscribed' : 'not_subscribed',
        hasActiveSubscription,
        remainingOneTimeCredits
      }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 200,
      }
    );
  } catch (error) {
    console.error('Error checking subscription status:', error);
    return new Response(
      JSON.stringify({ error: error.message }),
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 500,
      }
    );
  }
});
